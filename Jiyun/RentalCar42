import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

public class CarRental {
	double value[][] = new double[21][21];
	int policy[][] = new int[21][21];
	double g = 0.9;
	int actions[] = { -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5 };
	HashMap<String, HashMap<Integer, Double>> p_map = new HashMap<String, HashMap<Integer, Double>>();
	// s,a->s' : r
	HashMap<String, Double> possionMap = new HashMap<String, Double>();
	
	double smallValue = 0.000001;

	public CarRental() {
		// initial policy
		/*for (int car1 = 0; car1 <= 20; car1++) {
			for (int car2 = 0; car2 <= 20; car2++) {
				//policy[car1][car2] = randomWithRange(-5, 5);

				value[car1][car2] = randomWithRange(-10, 400);
			}
		}*/

		p_s_a();
	}

	public void policyEvaluate() {
		double diff = 0;
		int ct = 0;
		do {
			diff = 0;
			for (int car1 = 0; car1 <= 20; car1++) {
				for (int car2 = 0; car2 <= 20; car2++) {
					double v = value[car1][car2];
					int action = policy[car1][car2];

					double v_new = 0;
					for (int car1End = 0; car1End <= 20; car1End++) {
						for (int car2End = 0; car2End <= 20; car2End++) {

							String key1 = car1 + "_" + car2 + ":" + action
									+ ":" + car1End + "_" + car2End;
							
							//System.out.println("new macthed key:" + key1);
							
							if (p_map.containsKey(key1)) {
								//System.out.println("new macthed key:" + key1);
								HashMap<Integer, Double> tmp = p_map.get(key1);
								Iterator it = tmp.entrySet().iterator();
								while (it.hasNext()) {
									Map.Entry pair = (Map.Entry) it.next();
									//System.out.println("new macthed key:" + pair.getKey() + ":" + pair.getValue());
									v_new += ((Double) pair.getValue()) * ((Integer) pair.getKey() + g * value[car1End][car2End]);
									//it.remove(); // avoids a ConcurrentModificationException
								}
							}
							
							//System.out.println("new macthed v_new:" + v_new);
						}
					}

					//System.out.println(car1 + "_" + car2 + " new updated value:" + v_new);
					value[car1][car2] = v_new;
					diff = Math.max(diff, Math.abs(v_new - v));
				}
			}
			
			//outValue();
			
			ct++;
			//System.out.println("diff is:" + diff);
		} while (diff > 0.00000001 ); //&& ct <= 100
	}
	
	public void checkPSA(){
		//HashMap<String, HashMap<Integer, Double>>
		Iterator it = p_map.entrySet().iterator();
		while (it.hasNext()) {
			Map.Entry pair = (Map.Entry) it.next();
			String key = (String) pair.getKey();
			HashMap<Integer, Double> tmp = (HashMap<Integer, Double>) pair.getValue();
			
			Iterator it1 = tmp.entrySet().iterator();
			while (it1.hasNext()) {
				Map.Entry pair1 = (Map.Entry) it1.next();
				System.out.println(key + ":" + pair1.getKey() + "," + pair1.getValue());
				//it1.remove(); // avoids a ConcurrentModificationException
			}
			//it.remove(); // avoids a ConcurrentModificationException
		}
	}
	
	public void checkPR(){
		HashMap<String, Double> ck = new HashMap<String, Double>();
		
		Iterator it = p_map.entrySet().iterator();
		while (it.hasNext()) {
			Map.Entry pair = (Map.Entry) it.next();
			String key = (String) pair.getKey();
			HashMap<Integer, Double> tmp = (HashMap<Integer, Double>) pair.getValue();
			
			double s = 0;
			Iterator it1 = tmp.entrySet().iterator();
			while (it1.hasNext()) {
				Map.Entry pair1 = (Map.Entry) it1.next();
				s += (Double) pair1.getValue();
				//it1.remove(); // avoids a ConcurrentModificationException
			}
			
			String [] data = key.split(":");
			String key_new = data[0] + ":" + data[1];
			
			if(ck.containsKey(key_new)){
				ck.put(key_new, ck.get(key_new) + s);
			}else{
				ck.put(key_new, s);
			}
			
			//it.remove(); // avoids a ConcurrentModificationException
		}
		
		Iterator it2 = ck.entrySet().iterator();
		while (it2.hasNext()) {
			Map.Entry pair = (Map.Entry) it2.next();
			System.out.println(pair.getKey() + ":" + pair.getValue());
			//it2.remove(); // avoids a ConcurrentModificationException
		}
	}

	public boolean policyUpdate() {
		boolean stable = true;

		for (int car1 = 0; car1 <= 20; car1++) {
			for (int car2 = 0; car2 <= 20; car2++) {
				
				int action_old = policy[car1][car2];
				int action_new = action_old;
				double v_max = Double.MIN_VALUE;

				for (int i = 0; i < actions.length; i++) {
					int action = actions[i];
					
					int car1_new = car1 - action;
					int car2_new = car2 + action;
					
					if (car1_new < 0 || car2_new < 0){
						continue;
					}

					double v_new = 0;
					for (int car1End = 0; car1End <= 20; car1End++) {
						for (int car2End = 0; car2End <= 20; car2End++) {

							String key1 = car1 + "_" + car2 + ":" + action
									+ ":" + car1End + "_" + car2End;

							if (p_map.containsKey(key1)) {
								//System.out.println("find match:" + key1);
								HashMap<Integer, Double> tmp = p_map.get(key1);
								Iterator it = tmp.entrySet().iterator();
								while (it.hasNext()) {
									Map.Entry pair = (Map.Entry) it.next();
									v_new += ((Double) pair.getValue())
											* ((Integer) pair.getKey() + g
													* value[car1End][car2End]);

									//it.remove(); // avoids a
								}
							}
						}
					}
					//System.out.println("new value:" + v_new);

					if (v_new > v_max) {
						v_max = v_new;
						action_new = action;
					}
				}

				if (action_new != action_old) {
					policy[car1][car2] = action_new;
					stable = false;
				}
			}
		}

		return stable;
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		CarRental instance = new CarRental();
		
		System.out.println("initial over.");
		
		instance.outPolicy();
		
		//instance.checkPR();
		//instance.checkPSA();

		boolean stable = false;
		int count = 0;

		do {
			count++;
			
			instance.policyEvaluate();
			
			System.out.println("evaluation over.");

			stable = instance.policyUpdate();
			
			System.out.println("update over.");

			if (count <= 4) {
				System.out.println("iteration " + count);
				instance.outPolicy();
			}
		} while (stable);

		instance.outPolicy();
	}

	/*
	 * public void p_s_a(int car1, int car2, int action){
	 * 
	 * int car1_new = car1 - action;
	 * 
	 * int car2_new = car2 + action;
	 * 
	 * }
	 */
	
	public void p_s_a() {
		for (int car1 = 0; car1 <= 20; car1++) {
			//System.out.println(car1  + " initiate.");
			for (int car2 = 0; car2 <= 20; car2++) {
				//System.out.println(car1 + ":" + car2 + " initiate.");
				for (int i = 0; i < actions.length; i++) {
					int action = actions[i];
					//System.out.println(car1 + ":" + car2 + "action " + action + " initiate.");

					int car1_new = car1 - action;
					int car2_new = car2 + action;

					/*if (car1_new < 0){
						car2_new += car1_new;
						car1_new = 0;
					}else{
						if(car2_new < 0){
							car1_new += car2_new;
							car2_new = 0;
						}
					}*/
					if (car1_new < 0 || car2_new < 0){
						continue;
					}

					if (car1_new > 20)
						car1_new = 20;

					if (car2_new > 20)
						car2_new = 20;

					int car1Rent = 0;
					double p_car1Rent = 0;
					do {
						p_car1Rent = possionRent(1, car1Rent);
						
						int car1RTN = 0;
						double p_car1RTN = 0;
						do {
							p_car1RTN = possionRTN(1, car1RTN);
							int carT1 = car1_new - car1Rent;
							if(carT1 < 0) carT1 = 0;
							int car1End = carT1 + car1RTN;
							if(car1End > 20) car1End = 20;
							double p_car1 = p_car1Rent * p_car1RTN;

							int car2Rent = 0;
							double p_car2Rent = 0;
							do {
								p_car2Rent = possionRent(2, car2Rent);
								
								int car2RTN = 0;
								double p_car2RTN = 0;
								do {
									p_car2RTN = possionRTN(2, car2RTN);
									int carT2 = car2_new - car2Rent;
									if(carT2 < 0) carT2 = 0;
									int car2End = carT2 + car2RTN;
									if(car2End > 20) car2End = 20;
									double p_car2 = p_car2Rent * p_car2RTN;

									int reward = 10 * (Math.min(car1Rent,car1_new) + Math.min(car2Rent,car2_new));
									int r_tmp=0;
									/*if(action >= 0){
										r_tmp = 2*Math.min(car1, action);
									}else{
										r_tmp = 2*Math.min(car2, -action);
									}*/
									r_tmp = 2* action;
									reward -= r_tmp;

									String key1 = car1 + "_" + car2 + ":"
											+ action + ":" + car1End + "_"
											+ car2End;

									int key2 = reward;

									double p = p_car1 * p_car2;

									if (!p_map.containsKey(key1)) {
										HashMap<Integer, Double> tmp = new HashMap<Integer, Double>();

										p_map.put(key1, tmp);
									}

									HashMap<Integer, Double> tmp = p_map
											.get(key1);

									if (!tmp.containsKey(key2)) {
										tmp.put(key2, p);

									} else {
										tmp.put(key2, tmp.get(key2) + p);
									}

									car2RTN++;
								} while (p_car2RTN > smallValue && car2RTN <= 20);

								car2Rent++;
							} while (car2Rent <= 20
									&& p_car2Rent > smallValue);

							car1RTN++;
						} while (p_car1RTN > smallValue && car1RTN <= 20);

						car1Rent++;
					} while (car1Rent <= 20 && p_car1Rent > smallValue); // 
				}
			}
		}
	}

	public double possionRent(int location, int num) {
		int gamma = 3;

		if (location == 2)
			gamma = 4;
		
		String key = gamma + ":" + num;
		if(possionMap.containsKey(key)){
			return possionMap.get(key);
		}

		double factor = 1;

		for (int i = 1; i <= num; i++) {
			factor *= i;
		}

		double p = Math.pow(gamma, num) / factor * Math.pow(Math.E, -gamma);
		
		possionMap.put(key, p);

		return p;
	}

	public double possionRTN(int location, int num) {
		int gamma = 3;

		if (location == 2)
			gamma = 2;
		
		String key = gamma + ":" + num;
		if(possionMap.containsKey(key)){
			return possionMap.get(key);
		}

		double factor = 1;

		for (int i = 1; i <= num; i++) {
			factor *= i;
		}

		double p = (Math.pow(gamma, num) / factor) * Math.pow(Math.E, -gamma);
		
		possionMap.put(key, p);

		return p;
	}

	int randomWithRange(int min, int max){
		int range = (max - min) + 1;

		return (int) (Math.random() * range) + min;
	}

	public void outPolicy() {
		
		System.out.println("Values:");

		for (int car1 = 20; car1 >= 0; car1--) {
			for (int car2 = 0; car2 <= 20; car2++) {
				System.out.print(value[car1][car2] + "\t");
			}

			System.out.println("");
		}
		System.out.println("");
		
		System.out.println("Policy:");

		for (int car1 = 20; car1 >= 0; car1--) {
			for (int car2 = 0; car2 <= 20; car2++) {
				System.out.print(policy[car1][car2] + "\t");
			}

			System.out.println("");
		}
		System.out.println("");
	}
	
	public void outValue() {
		
		System.out.println("Values:");

		for (int car1 = 20; car1 >= 0; car1--) {
			for (int car2 = 0; car2 <= 20; car2++) {
				System.out.print(value[car1][car2] + "\t");
			}

			System.out.println("");
		}
		System.out.println("");
	}
}
